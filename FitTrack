import tkinter as tk
from tkinter import Canvas, messagebox
import sqlite3

def create_database():
    conn = sqlite3.connect("customers.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS Customers (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT UNIQUE,
                        password TEXT)''')
    conn.commit()
    conn.close()

def insert_user(username, password):
    conn = sqlite3.connect("customers.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO Customers (username, password) VALUES (?, ?)", (username, password))
        conn.commit()
    except sqlite3.IntegrityError:
        messagebox.showerror("Error", "Username already exists!")
    conn.close()

def check_credentials(username, password):
    conn = sqlite3.connect("customers.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Customers WHERE username=? AND password=?", (username, password))
    user = cursor.fetchone()
    conn.close()
    return user

def open_landing_page():
    landing_page = tk.Toplevel(root)
    landing_page.title("Welcome")
    landing_page.geometry("400x400")
    landing_page.configure(bg="black")
    tk.Label(landing_page, text="Welcome!", fg="red", bg="black", font=("Arial", 20, "bold")).pack(pady=20)

def open_create_account():
    def submit_details():
        username = username_entry.get()
        password = password_entry.get()
        if username and password:
            insert_user(username, password)
            create_window.destroy()
        else:
            messagebox.showerror("Error", "Please enter both username and password")
    
    create_window = tk.Toplevel(root)
    create_window.title("Create Account")
    create_window.geometry("400x400")
    create_window.configure(bg="black")
    
    tk.Label(create_window, text="Create Account", fg="red", bg="black", font=("Arial", 20, "bold")).pack(pady=20)
    
    tk.Label(create_window, text="Enter Username:", fg="white", bg="black", font=("Arial", 14)).pack(pady=10)
    username_entry = tk.Entry(create_window, font=("Arial", 14), bg="gray", fg="white", width=30)
    username_entry.pack(pady=5)
    
    tk.Label(create_window, text="Enter Password:", fg="white", bg="black", font=("Arial", 14)).pack(pady=10)
    password_entry = tk.Entry(create_window, show="*", font=("Arial", 14), bg="gray", fg="white", width=30)
    password_entry.pack(pady=5)
    
    tk.Button(create_window, text="Submit", fg="white", bg="red", font=("Arial", 14, "bold"), command=submit_details).pack(pady=20)

def open_sign_in():
    def handle_login():
        username = username_entry.get()
        password = password_entry.get()
        user = check_credentials(username, password)
        if user:
            sign_in_window.destroy()
            open_landing_page()
        else:
            messagebox.showerror("Error", "Incorrect username or password")
    
    sign_in_window = tk.Toplevel(root)
    sign_in_window.title("Sign In")
    sign_in_window.geometry("400x400")
    sign_in_window.configure(bg="black")
    
    tk.Label(sign_in_window, text="Sign In", fg="red", bg="black", font=("Arial", 20, "bold")).pack(pady=20)
    
    tk.Label(sign_in_window, text="Enter Username:", fg="white", bg="black", font=("Arial", 14)).pack(pady=10)
    username_entry = tk.Entry(sign_in_window, font=("Arial", 14), bg="gray", fg="white", width=30)
    username_entry.pack(pady=5)
    
    tk.Label(sign_in_window, text="Enter Password:", fg="white", bg="black", font=("Arial", 14)).pack(pady=10)
    password_entry = tk.Entry(sign_in_window, show="*", font=("Arial", 14), bg="gray", fg="white", width=30)
    password_entry.pack(pady=5)
    
    tk.Button(sign_in_window, text="Submit", fg="white", bg="red", font=("Arial", 14, "bold"), command=handle_login).pack(pady=20)

def create_rounded_rectangle(canvas, x1, y1, x2, y2, radius, **kwargs):
    points = [
        x1 + radius, y1,
        x2 - radius, y1,
        x2, y1,
        x2, y1 + radius,
        x2, y2 - radius,
        x2, y2,
        x2 - radius, y2,
        x1 + radius, y2,
        x1, y2,
        x1, y2 - radius,
        x1, y1 + radius,
        x1, y1
    ]
    return canvas.create_polygon(points, **kwargs, smooth=True)

def create_rounded_button(canvas, x, y, width, height, text, command, bg, fg):
    radius = 20
    button_bg = create_rounded_rectangle(canvas, x, y, x + width, y + height, radius, fill=bg, outline=bg)
    button_text = canvas.create_text(x + width / 2, y + height / 2, text=text, fill=fg, font=("Arial", 20, "bold"))
    
    canvas.tag_bind(button_bg, "<Button-1>", lambda event: command())
    canvas.tag_bind(button_text, "<Button-1>", lambda event: command())

# Create the main window
root = tk.Tk()
root.title("FitTrack")
root.geometry("430x932")  # Set window size
root.configure(bg="black")  # Set background color

create_database()

# Create and place the app name label
label = tk.Label(root, text="FitTrack", fg="red", bg="black", font=("Arial", 50, "bold"))
label.pack(pady=120)  # Adjusted padding to move it slightly higher  # Increased padding to move it lower

# Create and place the tagline
subtitle = tk.Label(root, text="Lift, Rest, Repeat", fg="white", bg="black", font=("Arial", 20))
subtitle.pack(pady=0, after=label)  # Adjusted padding to place it directly under the logo

# Create a canvas to draw rounded buttons
canvas = Canvas(root, width=430, height=150, bg="black", highlightthickness=0)
canvas.pack(side="bottom", pady=50)

# Create rounded buttons
create_rounded_button(canvas, 65, 20, 300, 60, "Create Account", open_create_account, "black", "red")
create_rounded_button(canvas, 65, 90, 300, 60, "Sign In", open_sign_in, "red", "white")

# Run the application
root.mainloop()
